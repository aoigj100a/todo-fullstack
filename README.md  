# Todo Full Stack Project

## 專案目標

- 建立一個前後端分離的 Todo List 應用，練習完整的全端開發流程。
- 定位在輕量級專案管理工具，用於：任務追蹤與管理、團隊協作、進度可視化、簡單的工作流程管理
- 實作 JWT 身份驗證系統，採用 MongoDB 作為資料庫，使用 React Query/SWR 管理前端資料狀態。

## 技術選擇
### 前端（Next.js）
- TypeScript
- React Query/SWR 資料處理
- Tailwind CSS 樣式
- shadcn/ui 元件庫

### 後端（Express.js）
- TypeScript
- MongoDB 資料庫
- JWT 身份驗證
- Express Validator 資料驗證

### 1. 專案初始設定 ✅
- [x] 建立基本的 Express 應用程式
- [x] 設定 TypeScript
- [x] 加入 CORS
- [x] 建立 Git 版控
- [x] 設定環境變數 (.env)
- [x] monorepo 初始設定
- [x] 建立資料夾結構
- [ ] 設置共用ESLint配置
- [ ] 加入 ESLint 規則
- [ ] 配置TypeScript項目引用

### 2. 基礎架構 (進行中)

```
根目錄 monorepo 設置

todo-fullstack/
├── apps/                    # 應用程式
│   ├── frontend/           # Next.js 前端
│   └── backend/            # Express.js 後端
├── packages/               # 共用套件
│   └── shared/            # 共用型別和工具
├── package.json           # 根目錄配置
└── README.md
```

## 3. 前端架構 (apps/frontend)

```
frontend/
├── public/                # 靜態資源
├── src/
│   ├── app/              # Next.js 13+ App Router
│   │   ├── layout.tsx
│   │   ├── page.tsx
│   │   └── (routes)/    # 路由分組
│   ├── components/       # React 元件
│   │   ├── ui/          # 基礎 UI 元件
│   │   └── features/    # 功能元件
│   ├── hooks/           # 自定義 Hooks
│   ├── lib/             # 工具函式
│   ├── services/        # API 服務
│   ├── styles/          # 樣式檔案
│   └── types/           # 型別定義
├── .env                  # 環境變數
├── next.config.ts        # Next.js 配置
├── tailwind.config.ts    # Tailwind CSS 配置
└── tsconfig.json        # TypeScript 配置
```

### 4. 基礎頁面建置

4.1 基礎頁面建置

- [ ] 建立頁面路由結構：
  - [ ] /login (登入頁面)
  - [ ] /register (註冊頁面)
  - [ ] /todos (待辦事項主頁面)
  - [ ] /profile (個人資料頁面)

4.2 Todo 列表介面

- [ ] 實作 Todo 列表元件：
  - [ ] 列表容器與卡片設計
  - [ ] Todo 項目的展示樣式
  - [ ] 完成狀態切換功能
  - [ ] 批量操作功能列
  - [ ] 空列表提示狀態

4.3 Todo 操作介面

- [ ] 實作新增/編輯表單：
  - [ ] 彈出式對話框設計
  - [ ] 表單驗證機制
  - [ ] 日期選擇器整合
  - [ ] 優先級選擇器
  - [ ] 提交與取消按鈕

4.4 篩選與排序功能

- [ ] 實作篩選功能：
  - [ ] 狀態篩選（全部/進行中/已完成）
  - [ ] 日期範圍篩選
  - [ ] 優先級篩選
  - [ ] 分類篩選

4.5 使用者介面

- [ ] 實作登入/註冊表單：
  - [ ] 表單驗證
  - [ ] 錯誤提示
  - [ ] 登入狀態保持
  - [ ] 密碼重設功能

4.6 回饋與通知

- [ ] 實作通知系統：
  - [ ] 操作成功提示
  - [ ] 錯誤提示
  - [ ] 載入狀態指示
  - [ ] 確認對話框

4.7 UI 元件開發

- [ ] 整合 shadcn/ui 元件：
  - [ ] Button 元件客製化
  - [ ] Input 元件樣式調整
  - [ ] Dialog 元件配置
  - [ ] Select 元件整合
  - [ ] DatePicker 元件設定

4.8 響應式設計

- [ ] 實作 RWD 佈局：
  - [ ] 手機版面配置
  - [ ] 平板版面配置
  - [ ] 桌機版面配置
  - [ ] 側邊欄收合功能

## 5. 後端架構 (apps/backend)

── backend/
    ├── src/
    |   ├── config/       # 所有配置文件
    |   ├── controllers/  # 控制器
    |   ├── middlewares/  # 中間件
    |   ├── models/       # 數據模型
    |   ├── routes/       # 路由
    |   ├── utils/        # 工具函數
    |   ├── app.ts        # Express 應用
    |   └── server.ts     # 服務器入口
    ├── dist/             # 編譯輸出
    ├── node_modules/     # 依賴包
    ├── nodemon.json      # Nodemon 配置
    ├── package.json      # 項目配置
    └── tsconfig.json     # TS 配置

### 6. 資料庫設定

- [x] 安裝 MongoDB 相關套件
- [x] 建立資料庫連線設定
- [x] 建立資料庫錯誤處理機制
- [x] 設定資料庫連線池
- [x] 設定錯誤處理中間件
- [x] 加入請求日誌功能
- [x] 設定健康檢查路由 (`/api/health`)

### 7. Todo 功能實作

- [ ] 建立 Todo Model
- [ ] 實作 Todo Routes
- [ ] 實作 Todo Controller
- [ ] API 端點：
  - [ ] GET /api/todos (取得所有)
  - [ ] POST /api/todos (新增)
  - [ ] PUT /api/todos/:id (更新)
  - [ ] DELETE /api/todos/:id (刪除)

### 8. 資料驗證

- [ ] 安裝 express-validator
- [ ] 建立驗證中間件
- [ ] 加入請求資料驗證

### 9. 安全性設定 ✅

- [x] 設定適當的 CORS 規則
- [x] 加入 helmet 安全標頭
- [ ] 設定速率限制
- [ ] 設定輸入資料清理

### 10. 效能優化

- [ ] 設定資料壓縮
- [ ] 實作快取機制
- [ ] 優化資料庫查詢
- [ ] 設定適當的超時處理

### 11. 測試

- [ ] 設定測試環境
- [ ] 撰寫單元測試
- [ ] 撰寫整合測試
- [ ] 設定CI/CD流程
- [ ] 建立共用測試環境
- [ ] 設定 Jest 配置
- [ ] 建立產品正式環境

### 12. 文件

- [ ] API 文件
- [ ] 使用說明
- [ ] 部署說明

### 13. 部署準備

- [ ] 設定 production 環境變數
- [ ] 建立 Docker 配置
- [ ] 設定錯誤監控
- [ ] 設定日誌系統